// Code generated by "enumer -json -linecomment -type OrderStatus"; DO NOT EDIT.

//
package orders

import (
	"encoding/json"
	"fmt"
)

const _OrderStatusName = "OpenBilledPaidCancelled"

var _OrderStatusIndex = [...]uint8{0, 4, 10, 14, 23}

func (i OrderStatus) String() string {
	i -= 1
	if i < 0 || i >= OrderStatus(len(_OrderStatusIndex)-1) {
		return fmt.Sprintf("OrderStatus(%d)", i+1)
	}
	return _OrderStatusName[_OrderStatusIndex[i]:_OrderStatusIndex[i+1]]
}

var _OrderStatusValues = []OrderStatus{1, 2, 3, 4}

var _OrderStatusNameToValueMap = map[string]OrderStatus{
	_OrderStatusName[0:4]:   1,
	_OrderStatusName[4:10]:  2,
	_OrderStatusName[10:14]: 3,
	_OrderStatusName[14:23]: 4,
}

// OrderStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func OrderStatusString(s string) (OrderStatus, error) {
	if val, ok := _OrderStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to OrderStatus values", s)
}

// OrderStatusValues returns all values of the enum
func OrderStatusValues() []OrderStatus {
	return _OrderStatusValues
}

// IsAOrderStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i OrderStatus) IsAOrderStatus() bool {
	for _, v := range _OrderStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for OrderStatus
func (i OrderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for OrderStatus
func (i *OrderStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("OrderStatus should be a string, got %s", data)
	}

	var err error
	*i, err = OrderStatusString(s)
	return err
}
