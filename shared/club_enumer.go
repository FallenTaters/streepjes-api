// Code generated by "enumer -linecomment -type Club"; DO NOT EDIT.

//
package shared

import (
	"fmt"
)

const _ClubName = "UnknownParaboolGladiators"

var _ClubIndex = [...]uint8{0, 7, 15, 25}

func (i Club) String() string {
	if i < 0 || i >= Club(len(_ClubIndex)-1) {
		return fmt.Sprintf("Club(%d)", i)
	}
	return _ClubName[_ClubIndex[i]:_ClubIndex[i+1]]
}

var _ClubValues = []Club{0, 1, 2}

var _ClubNameToValueMap = map[string]Club{
	_ClubName[0:7]:   0,
	_ClubName[7:15]:  1,
	_ClubName[15:25]: 2,
}

// ClubString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ClubString(s string) (Club, error) {
	if val, ok := _ClubNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Club values", s)
}

// ClubValues returns all values of the enum
func ClubValues() []Club {
	return _ClubValues
}

// IsAClub returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Club) IsAClub() bool {
	for _, v := range _ClubValues {
		if i == v {
			return true
		}
	}
	return false
}
